<?php

namespace Lunia\Auditoria\Tests\Services\Auditoria;

use Illuminate\Support\Facades\DB;
use Illuminate\Support\Str;
use Lunia\Auditoria\Exceptions\RangoDeFechasNoValidoException;
use Lunia\Auditoria\Repositories\Auditoria\AuditoriaRepository;
use Lunia\Auditoria\Services\Auditoria\ArchivaRegistrosAuditoria;
use Lunia\Auditoria\Services\Auditoria\ArchivaRegistrosAuditoriaRequest;
use Lunia\Auditoria\Tests\TestCase;
use Mockery\MockInterface;

class ArchivaRegistrosAuditoriaTest extends TestCase
{
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function testDebeRecibirUnConjuntoDeFechas()
    {

        $this->expectException(\InvalidArgumentException::class);

        $this->app->make(ArchivaRegistrosAuditoria::class)->handle(
            new ArchivaRegistrosAuditoriaRequest(null, null)
        );

    }

    public function testDebeRecibirUnRangoValidoDeFechas()
    {

        $this->expectException(RangoDeFechasNoValidoException::class);

        $this->app->make(ArchivaRegistrosAuditoria::class)->handle(
            new ArchivaRegistrosAuditoriaRequest('2022-01-01', '2021-01-01')
        );

    }

    public function testDebeLlamarAlRepositorioConLosRangos()
    {
        $this->mock(AuditoriaRepository::class, function (MockInterface $mock) {
            $mock->shouldReceive('borrar')->once()->with('2021-01-01', '2022-01-01');
        });

        $this->app->make(ArchivaRegistrosAuditoria::class)->handle(
            new ArchivaRegistrosAuditoriaRequest('2021-01-01', '2022-01-01')
        );
    }

    public function testDebeBorrarLosRegistrosCreados()
    {
        DB::table('auditoria')->insert([
            'id' => Str::uuid(),
            'accion' => 'INSERT',
            'query' => "select * from ...",
            'usuario_id' => null,
            'url' => 'http://localhost',
            'payload' => json_encode([]),
            'tabla' => 'tabla_demo',
            'created_at' => '2021-02-02',
            'updated_at' => '2021-02-02',
        ]);

        DB::table('auditoria')->insert([
            'id' => Str::uuid(),
            'accion' => 'INSERT',
            'query' => "select * from ...",
            'usuario_id' => null,
            'url' => 'http://localhost',
            'payload' => json_encode([]),
            'tabla' => 'tabla_demo',
            'created_at' => '2021-02-03',
            'updated_at' => '2021-02-03',
        ]);

        DB::table('auditoria')->insert([
            'id' => Str::uuid(),
            'accion' => 'INSERT',
            'query' => "select * from ...",
            'usuario_id' => null,
            'url' => 'http://localhost',
            'payload' => json_encode([]),
            'tabla' => 'tabla_demo',
            'created_at' => '2022-02-03',
            'updated_at' => '2022-02-03',
        ]);

        $this->app->make(ArchivaRegistrosAuditoria::class)->handle(
            new ArchivaRegistrosAuditoriaRequest('2021-01-01', '2022-01-01')
        );

        $registros = DB::table('auditoria')->get();

        $this->assertCount(1,$registros);

    }
}
